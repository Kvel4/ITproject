import telebot
import json
import shelve
import requests
import time
from random import choice


class Db:
    @staticmethod
    def write_user(dictionary, user_id):
        with open('json_data', 'r', encoding='utf-8') as inp:
            list_of_dict = json.load(inp)
            list_of_dict[str(user_id)] = dictionary

            with open('json_data', 'w', encoding='utf-8') as data:
                json.dump(list_of_dict, data, indent=4, ensure_ascii=False)

    @staticmethod
    def get_user(message_id):
        with open('json_data', 'r', encoding='utf-8') as inp:
            return json.load(inp)[str(message_id)]

    @staticmethod
    def get_users():
        with open('json_data', 'r', encoding='utf-8') as inp:
            return json.load(inp)

    @staticmethod
    def get_subway(city):
        with open('json_subway', 'r', encoding='utf-8') as inp:
            return json.load(inp)[city]


class User:
    def __init__(self, message_id):
        self.quest = Db.get_users()
        self.quest[str(message_id)] = {
            'name': '',
            'event_type': [],
            'city_name': '',
            'amount': '',
            'hobby': [],
            'free': '',
        }

    @staticmethod
    def renew():
        return {
            'name': '',
            'event_type': [],
            'city_name': '',
            'amount': '',
            'hobby': [],
            'free': '',
        }

    @staticmethod
    def send_request(params):
        return requests.get('https://kudago.com/public-api/v1.4/events/', params=params).json()['results']

    @staticmethod
    def set_priority(message_id, request):
        priority = {int(i): 0 for i in range(len(request))}
        u = Db.get_user(message_id)

        if len(request) > u['amount']:
            i = 0
            for event in request:
                for element in u['event_type']:
                    if element in event['categories'] or element in event['tags']:
                        priority[i] += 1

                for element in u['hobby']:
                    if element in event['categories'] or element in event['tags']:
                        priority[i] += 1
                i += 1

            priority = sorted(priority.items(), key=lambda item: item[1], reverse=True)

            # выбираем amount наиболее подходящих параметров
            priority = dict(priority[:u['amount']])
            
        for i in priority.keys():
            if request[i]['place'] is None:
                s = '{} \n\n' \
                    'Начало: {} {}\n' \
                    'Конец: {} {} \n\n' \
                    'Нет конкретного места \n\n' \
                    '{}' \
                    'Цена: {} \n\n' \
                    'Более подробную информацию можно посмотреть здесь: {}'.format(
                                        request[i]['title'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['start_date'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['start_time'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['end_date'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['end_time'],
                                        request[i]['description'],
                                        request[i]['price'],
                                        request[i]['site_url'])
            else:
                s = '{} \n\n' \
                    'Начало: {} {}\n' \
                    'Конец: {} {}\n\n' \
                    'Место проведения: {}.\n' \
                    'Метро: {}\n' \
                    'Адрес: {} \n\n' \
                    '{}' \
                    'Цена: {} \n\n' \
                    'Более подробную информацию можно посмотреть здесь: {}'.format(
                                        request[i]['title'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['start_date'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['start_time'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['end_date'],
                                        request[i]['dates'][len(request[i]['dates']) - 1]['end_time'],
                                        request[i]['place']['title'],
                                        request[i]['place']['subway'],
                                        request[i]['place']['address'],
                                        request[i]['description'],
                                        request[i]['price'],
                                        request[i]['site_url'])

            s = s.replace('None', 'Нет данных')
            keyboard = telebot.types.ReplyKeyboardRemove()
            bot.send_message(message_id, s, reply_markup=keyboard)


class States:
    name = '1'
    event = '2'
    event_cross = '3'
    city = '4'
    city_cross = '5'
    amount = '6'
    amount_cross = '7'
    hobby = '8'
    hobby_cross = '9'
    is_free = '10'
    is_free_cross = '11'
    usage = '12'
    geo = '13'
    subway = '14'

    db_file = "database.db"

    @staticmethod
    def get_current_state(user_id):
        with shelve.open(States.db_file) as db:
            try:
                return db[str(user_id)]
            except KeyError:
                pass

    @staticmethod
    def set_state(user_id, value):
        with shelve.open(States.db_file) as db:
            db[str(user_id)] = value


bot = telebot.TeleBot('568171932:AAFqVYBHASYegT6PXMUgsufK3Adw-Ze6io4')
joke = ["Подождите, шутим про Кел'Тузада",
        'Подождите, кормим программиста',
        'Подождите, пытаемся спрятаться от дедлайна']


@bot.message_handler(commands=['start'])
def questionnaire(message):
    States.set_state(message.chat.id, States.name)
    bot.send_message(message.chat.id, 'Видимо ты совсем отчаялся, раз пришел ко мне. '
                                      'Но думаю, я смогу помочь, хотя у всего есть цена. '
                                      'Ответь на несколько вопросов и мы в расчете.\n'
                                      'На каждом этапе необходимо выбрать хотя бы 1 ответ, '
                                      'перед тем, как пройти дальше')

    events_names = ['фестиваль',
                    'кино',
                    'выставка',
                    'концерт',
                    'встреча',
                    'туризм',
                    'шоу',
                    'спортивное мероприятие',
                    'театр',
                    'игра',
                    'вечеринка',
                    'маскарад',
                    ]

    transfer = {'фестиваль': 'festival',
                'кино': 'cinema',
                'выставка': 'exhibition',
                'концерт': 'concert',
                'встреча': 'meeting',
                'туризм': 'tour',
                'шоу': 'show',
                'спортивное мероприятие': 'sport',
                'театр': 'theatre',
                'игра': 'game',
                'вечеринка': 'party',
                'маскарад': 'masquerade',
                }
    numbers = ['5', '6', '7', '8', '9', '10']
    cities = ['Москва', 'Санкт-Петербург']
    price = ['Да', 'Нет']
    hobbies = ['музыка',
               'живопись',
               'архитектруа и дизайн',
               'современное искусство',
               'новые технологии',
               'наука',
               'кулинария'
               ]

    bot.send_message(message.chat.id, "Для начала, я бы хотел узнать, как к тебе обращаться")
    person = User(message.chat.id)

    @bot.message_handler(func=lambda message_name: States.get_current_state(message_name.chat.id) == States.name)
    def i_know_de_name(message_name):
        person.quest[str(message_name.chat.id)] = User.renew()
        person.quest[str(message_name.chat.id)]['name'] = message_name.text
        States.set_state(message_name.chat.id, States.event)

        markup = telebot.types.ReplyKeyboardMarkup()
        for event in events_names:
            markup.add(event)
        markup.add('Перейти к следующему вопросу')
        bot.send_message(message_name.chat.id,
                         'Чтож, {}, какие события ты предпочитаешь?'
                         .format(person.quest[str(message_name.chat.id)]['name']), reply_markup=markup)

    @bot.message_handler(func=lambda message_event: (States.get_current_state(message_event.chat.id) == States.event
                         or States.get_current_state(message_event.chat.id) == States.event_cross)
                         and message_event.text in events_names)
    def event_type(message_event):
        if transfer[message_event.text] not in person.quest[str(message_event.chat.id)]['event_type']:
                person.quest[str(message_event.chat.id)]['event_type'].append(transfer[message_event.text])
        States.set_state(message_event.chat.id, States.event_cross)

    @bot.message_handler(func=lambda message_next: States.get_current_state(message_next.chat.id) == States.event_cross
                         and message_next.text == 'Перейти к следующему вопросу')
    def go_to_next(message_next):
        markup = telebot.types.ReplyKeyboardMarkup()
        for city in cities:
            markup.add(city)
        markup.add('Перейти к следующему вопросу')

        bot.send_message(message_next.chat.id, 'Теперь, я хотел бы знать, откуда судьба принесла тебя?',
                         reply_markup=markup)
        States.set_state(message_next.chat.id, States.city)

    @bot.message_handler(func=lambda message_city: (States.get_current_state(message_city.chat.id) == States.city
                         or States.get_current_state(message_city.chat.id) == States.city_cross)
                         and message_city.text in cities)
    def city_name(message_city):
        if message_city.text == 'Москва':
            person.quest[str(message_city.chat.id)]['city_name'] = 'msk'
        elif message_city.text == 'Санкт-Петербург':
            person.quest[str(message_city.chat.id)]['city_name'] = 'spb'
        States.set_state(message_city.chat.id, States.city_cross)

    @bot.message_handler(func=lambda message_next2: States.get_current_state(message_next2.chat.id) == States.city_cross
                         and message_next2.text == 'Перейти к следующему вопросу')
    def go_to_next1(message_next2):
        markup = telebot.types.ReplyKeyboardMarkup()
        for i in range(5, 11):
            markup.add(str(i))
        markup.add('Перейти к следующему вопросу')

        bot.send_message(message_next2.chat.id, 'О скольки событиях ты бы хотел получать информацию за раз?', reply_markup=markup)
        States.set_state(message_next2.chat.id, States.amount)

    @bot.message_handler(func=lambda message_amount: (States.get_current_state(message_amount.chat.id) == States.amount
                         or States.get_current_state(message_amount.chat.id) == States.amount_cross)
                         and message_amount.text in numbers)
    def restriction(message_amount):
        person.quest[str(message_amount.chat.id)]['amount'] = int(message_amount.text)
        States.set_state(message_amount.chat.id, States.amount_cross)

    @bot.message_handler(func=lambda message_next3: States.get_current_state(message_next3.chat.id) == States.amount_cross
                         and message_next3.text == 'Перейти к следующему вопросу')
    def go_to_next2(message_next3):
        markup = telebot.types.ReplyKeyboardMarkup()
        for hob in hobbies:
            markup.add(hob)
        markup.add('Перейти к следующему вопросу')

        bot.send_message(message_next3.chat.id, 'Также мне необходимо знать о твоих увлечениях', reply_markup=markup)
        States.set_state(message_next3.chat.id, States.hobby)

    @bot.message_handler(func=lambda message_hobby: (States.get_current_state(message_hobby.chat.id) == States.hobby
                         or States.get_current_state(message_hobby.chat.id) == States.hobby_cross)
                         and message_hobby.text in hobbies)
    def hobby(message_hobby):
        if message_hobby.text not in person.quest[str(message_hobby.chat.id)]['hobby']:
            person.quest[str(message_hobby.chat.id)]['hobby'].append(message_hobby.text)
        States.set_state(message_hobby.chat.id, States.hobby_cross)

    @bot.message_handler(func=lambda message_next4: States.get_current_state(message_next4.chat.id) == States.hobby_cross
                         and message_next4.text == 'Перейти к следующему вопросу')
    def go_to_next3(message_next4):
        markup = telebot.types.ReplyKeyboardMarkup()
        for p in price:
            markup.add(p)
        markup.add('Закончить опрос')

        bot.send_message(message_next4.chat.id, 'И напоследок, хотел бы ты видеть платные события?', reply_markup=markup)
        States.set_state(message_next4.chat.id, States.is_free)

    @bot.message_handler(func=lambda message_price: (States.get_current_state(message_price.chat.id) == States.is_free
                         or States.get_current_state(message_price.chat.id) == States.is_free_cross)
                         and message_price.text in price)
    def cost(message_price):
        if message_price.text == 'Да':
            person.quest[str(message_price.chat.id)]['free'] = 0
        elif message_price.text == 'Нет':
            person.quest[str(message_price.chat.id)]['free'] = 1
        States.set_state(message_price.chat.id, States.is_free_cross)

    @bot.message_handler(func=lambda message_end: States.get_current_state(message_end.chat.id) == States.is_free_cross
                         and message_end.text == 'Закончить опрос')
    def end(message_end):
        Db.write_user(person.quest[str(message_end.chat.id)], message_end.chat.id)

        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_message(message_end.chat.id,
                         'Благодарю, ты ответил на все мои вопросы \n'
                         'Если захочешь что-то изменить, еще раз активируй команду /start \n'
                         'В том же случае, если ты забыл зачем я в этом мире или хочешь узнать доступные команды, '
                         'напиши /help',
                         reply_markup=markup)
        States.set_state(message_end.chat.id, States.usage)


@bot.message_handler(commands=['return'])
def ret(message):
    States.set_state(message.chat.id, States.usage)
    bot.send_message(message.chat.id, 'Вы успешно вернулись в исходное состояние')


@bot.message_handler(commands=['help'])
def support(message):
    bot.send_message(message.chat.id, 'Я призван облегчить ориентацию в акуальных событиях Москвы и Санкт-Петербурга. '
                                      'По предоставлненным ниже командам ты можешь получить информацию о интересных '
                                      '(на основании заполненной анкеты) событиях рядом с '
                                      'твоей геолокацией/ выбранной станцией метро/ без привязи к месту.\n\n'
                                      'Список доступных команд:\n'
                                      '/start - Заполнение или перезаполнение анкеты\n'
                                      '/return - Возвращение в стартовое положение\n'
                                      '/subway - Подборка интересующих вас событий рядом с указанной станцией метро \n'
                                      '/geo - Интересные события недалеко от вашего местоположения\n'
                                      '/general - События всего города, наиболее соответствующие вашим интересам')


@bot.message_handler(commands=['geo'], func=lambda message: States.get_current_state(message.chat.id) == States.usage)
def geolocation(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button_geo = telebot.types.KeyboardButton(text="Отправить геолокацию", request_location=True)
    keyboard.add(button_geo)
    bot.send_message(message.chat.id,
                     "Для начала, было бы неплохо поделиться месторасположением(нет, я и не думал следить за вами)",
                     reply_markup=keyboard)

    @bot.message_handler(content_types=['location'], func=lambda message_loc: States.get_current_state(message_loc.chat.id) == States.usage)
    def coordinates(message_loc):
        kb = telebot.types.ReplyKeyboardRemove()
        u = Db.get_user(message_loc.chat.id)

        params = {
            'page_size': '100',
            'fields': 'id,dates,title,short_title,slug,place,description,body_text,location,categories,tagline,'
                      'age_restriction,price,is_free,site_url,tags,participants',
            'expand': 'place,location,dates',
            'text_format': 'plain',
            'actual_since': time.time() - 86400 * 7,
            'location': u['city_name'],
            'is_free': u['free'],
            'lon': message_loc.location.longitude,
            'lat': message_loc.location.latitude,
            'radius': 4000
        }

        bot.send_message(message_loc.chat.id, choice(joke))
        request = User.send_request(params)

        if len(request) == 0:
            bot.send_message(message_loc.chat.id, 'Простите, в радиусе 4 км от вас нет событий', reply_markup=kb)
        else:
            User.set_priority(message_loc.chat.id, request)


@bot.message_handler(commands=['subway'], func=lambda message: States.get_current_state(message.chat.id) == States.usage)
def subway(message):
    States.set_state(message.chat.id, States.subway)
    bot.send_message(message.chat.id, 'Введи станцию метро, рядом с которой хочешь увидеть события')

    @bot.message_handler(content_types=['text'], func=lambda message_subway: States.get_current_state(message_subway.chat.id) == States.subway)
    def metro(message_subway):
        u = Db.get_user(message_subway.chat.id)

        sw = Db.get_subway(u['city_name'])

        if message_subway.text in sw:
            params = {
                    'page_size': '100',
                    'fields': 'id,dates,title,short_title,slug,place,description,body_text,location,categories,tagline,'
                              'age_restriction,price,is_free,site_url,tags,participants',
                    'expand': 'place,location,dates',
                    'text_format': 'plain',
                    'actual_since': time.time() - 86400 * 7,
                    'location': u['city_name'],
                    'is_free': u['free'],
                    'lon': sw[message_subway.text]['lon'],
                    'lat': sw[message_subway.text]['lat'],
                    'radius': 2500
                }

            bot.send_message(message_subway.chat.id, choice(joke))

            request = User.send_request(params)

            if len(request) == 0:
                bot.send_message(message_subway.chat.id, 'Простите, в радиусе 2.5 км от станции метро нет событий')
            else:
                User.set_priority(message_subway.chat.id, request)

            States.set_state(message_subway.chat.id, States.usage)

        else:
            bot.send_message(message_subway.chat.id, 'Видимо, вы допустили ошибку в назвинии. Попробуйте еще раз')


@bot.message_handler(commands=['general'], func=lambda message: States.get_current_state(message.chat.id) == States.usage)
def general(message):
    u = Db.get_user(message.chat.id)

    params = {
        'page_size': '100',
        'fields': 'id,dates,title,short_title,slug,place,description,body_text,location,categories,tagline,'
                  'age_restriction,price,is_free,site_url,tags,participants',
        'expand': 'place,location,dates',
        'text_format': 'plain',
        'actual_since': time.time() - 86400 * 7,
        'location': u['city_name'],
        'is_free': u['free']
    }

    bot.send_message(message.chat.id, choice(joke))

    request = User.send_request(params)
    User.set_priority(message.chat.id, request)


if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=10000)
